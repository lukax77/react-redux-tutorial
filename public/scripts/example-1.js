/**
 * The key to dynamic updates is the call to this.setState().
 * We replace the old array of comments with the new one from
 * the server and the UI automatically updates itself.
 */
var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        // this.setState() !!
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  /**
   * getInitialState() executes exactly once during the lifecycle of the 
   * component and sets up the initial state of the component.
   */  
  getInitialState: function() {
    return {data: []};
  },
  /**
   * componentDidMount is a method called automatically by React after a 
   * component is rendered for the first time. All we have done here is 
   * move the AJAX call to a separate method and call it when the component
   * is first loaded and every 2 seconds after that.
   */
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);    
  },
  /**
   * props are immutable: they are passed from the parent and are "owned" 
   * by the parent. To implement interactions, we introduce mutable state
   * to the component. this.state is private to the component and can be 
   * changed by calling this.setState(). When the state updates, the component
   * re-renders itself. 
   */
  render: function() {
    // the function handleCommentSubmit is passed as a props
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {    
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
       {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({  
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    // in this props we have the function  
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  /**
   * React attaches event handlers to components using a camelCase naming
   * convention. We attach onChange handlers to the two <input> elements. 
   * Now, as the user enters text into the <input> fields, the attached 
   * onChange callbacks are fired and the state of the component is modified.
   * Subsequently, the rendered value of the input element will be updated 
   * to reflect the current component state.
   */
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },
  render: function() {    
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={5000}/>,
  document.getElementById('content')
);