/**
 * Redux nos permite con React describir la UI como funciones puras y
 * usar Redux para tener todo el estado de nuestra app y pasarlo a 
 * nuestras vistas
 */
var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        // función dispatch del Store, con la cual podemos despachar acciones !!
        this.props.setComments(data);
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.props.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    this.props.addComment(comment);
    
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.props.setComments(data);
      }.bind(this),
      error: function(xhr, status, err) {
        this.props.setComments(comments);
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  /**
   * componentDidMount is a method called automatically by React after a 
   * component is rendered for the first time. All we have done here is 
   * move the AJAX call to a separate method and call it when the component
   * is first loaded and every 2 seconds after that.
   */
  componentDidMount: function() {
    this.loadCommentsFromServer();
    //setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    console.log(this);
    // le pasa la funcion handleCommentSubmit como una propiedad.
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    /* this.props.data is available here */
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    // in this props we have the function 
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  /**
   * React attaches event handlers to components using a camelCase naming
   * convention. We attach onChange handlers to the two <input> elements. 
   * Now, as the user enters text into the <input> fields, the attached 
   * onChange callbacks are fired and the state of the component is modified.
   * Subsequently, the rendered value of the input element will be updated 
   * to reflect the current component state.
   */
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },
  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

/**
 * ////////////////////////////////////////////////////////////////////////////////
 * -------------------------APLICANDO REDUX----------------------------------------
 * //////////////////////////////////////////////////////////////////////////////// 
 */

/**
 * The store in our app will be a JavaScript object
 */
var initialState = {
  data: [],
  url: "/api/comments",
  pollInterval: 2000000
}

/**
 * REDUCERS
 * ------------------------------------------------------------------------
 * Now we need a reducer function, which returns the app state based on
 * the previous state and the dispatched action. Some practices to follow 
 * when writing a reducer: 
 *   (1) If state is undefined, return the initial state of the app. 
 *   (2) To return the next state, don’t mutate the state parameter. 
 *       Use Object.assign to copy the previous state and to merge changed
 *       properties into the next state. 
 *   (3) If there isn’t a new next state, return the previous state by 
 *       default.
 */
var reducer = function(state, action) {
  console.log('STATE', state);
  if(state === undefined) {
    return initialState;
  }
  var newState = state;
  switch(action.type) {
    case 'add_comment':
      var newComments = state.data.concat([action.comment]);
      newState = Object.assign({}, state, {data: newComments});
      break;
    case 'set_comments':
      newState = Object.assign({}, state, {data: action.data})
      break;
  }
  return newState;
}

/**
 * Creates a Redux store that holds the complete state tree of your app
 * There should only be a single store in your app
 */
var createStore = Redux.createStore;

/**
 * After defining the initialState object and reducer function, we create
 * our store
 */
var store = createStore(reducer, initialState);

/**
 * First, mapping state to props will provide the CommentBox component 
 * this.props.data, this.props.url and this.props.pollInterval from 
 * the Redux store
 */
var CommentBoxState = function(state) {
  return {
    data: state.data,
    url: state.url,
    pollInterval: state.pollInterval
  }
}

var CommentListState = function(state) {
  return {
    data: state.data
  }
}

/**
 * ACTIONS
 * ----------------------------------------------------------------------------
 * Then mapping dispatch functions for the add_comment and set_comments 
 * actions to props will make this.props.addComment and this.props.setComment 
 * available as functions in CommentBox.
 *
 * Actions send data from your app to your store. They are the only source of
 * information for the store. You send them to the store using store.dispatch()
 */
var CommentBoxDispatch = function(dispatch) {
  return {
    addComment: function(comment) {
      comment.id = Date.now();
      dispatch({
        type: 'add_comment',
        comment: comment,
      })
    },
    setComments: function(data) {
      dispatch({
        type: 'set_comments',
        data: data
      })
    }
  }
}

/**
 * Una vez encapsulada nuestra aplicación de React nos toca definir 
 * que componentes van a acceder a nuestro Store, ya que no todos lo 
 * van a necesitar. Para hacer eso necesitamos conectar nuestros 
 * componentes a Redux, esto se logra con un decorador que trae 
 * react-redux llamado connect.
 */
var connect = ReactRedux.connect;

/**
 * De esta forma nuestro componente va a tener dentro de sus 
 * props todos los datos del Store. Con esto ya podemos renderizar 
 * nuestra aplicación usando los datos almacenados en el Store de Redux.
 *
 * var ConnectedComponent = connect(mapStateToProps)(Component)
 *
 * In our app, this will allow the CommentList component to access 
 * comments from the Redux store state.data as this.props.data
 *
 * var ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(Component)
 *
 * Connecting CommentBox with mapStateToProps and mapDispatchToProps
 */
CommentBox = connect(
  CommentBoxState,
  CommentBoxDispatch
)(CommentBox)
CommentList = connect(
  CommentListState
)(CommentList)

/**
 * Lo primero que necesitamos es encapsular nuestra aplicación 
 * con el componente Provider que trae react-redux. Este componente 
 * recibe un único parámetro llamado store el cual es, como su nombre 
 * indica, la instancia del Store que usamos.
 */
var Provider = ReactRedux.Provider; 

/**
 * Connecting a React component to Redux allows the component to use 
 * the top-level store without having to pass the store down as a prop 
 * through its parent components. To start connecting components, we 
 * have to wrap our root component in Provider, a special React Redux 
 * component, and pass it the store variable.
 *
 * Now we can call CommentBox without props, because the props we need 
 * have been provided through connect
 */
ReactDOM.render(
  <Provider store={store}>
    <CommentBox />
  </Provider>,
  document.getElementById('content')
);